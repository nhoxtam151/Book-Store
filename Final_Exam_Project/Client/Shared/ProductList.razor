@using Final_Exam_Project.Client.Services.ProductService;
@using Final_Exam_Project.Shared;

@inject IProductServiceClient ProductServiceClient;

<div class="container py-5 bg-gradient">
    <div class="row justify-content-center">

        @foreach (var product in CategoryId == null ? Products : Products.Where(p => p.CategoryId == CategoryId))
        {
            <div class="col-lg-4 mb-3 d-flex align-items-stretch">
                <div class="card">
                    <a href="/product/@product.Id"><img src="@product.Image" class="card-img-top" alt="Card Image" id="yourElement"></a>
                    <div class="card-body d-flex flex-column">
                        <a href="/product/@product.Id" class="text-decoration-none text-black"><h5 class="card-title fw-bolder mt-4">@product.Title</h5></a>
                        <p class="card-text mb-4">@product.Description</p>

                        <div>
                            <div class="d-flex justify-content-between">
                                <span>Original Price</span><span class="text-decoration-line-through">$@product.OriginalPrice</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Discount</span><span class="text-decoration-line-through text-danger">@String.Format("{0:0.00}",DiscountPercent(product))%</span>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between total font-weight-bold mt-2">
                            <span class="fw-bolder">Price</span><span class="fw-bolder">$@product.Price</span>
                        </div>

                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public int? CategoryId { get; set; } = null;



    public List<Product> Products { get; set; } = new List<Product>();

    protected override async Task OnInitializedAsync()
    {

        Products = await ProductServiceClient.GetProducts();

    }

    public decimal DiscountPercent(Product product)
    {
        if (product.Price <= 0 || product.OriginalPrice <= 0)
        {
            return 0;
        }
        return ((product.Price / product.OriginalPrice) * 100) - 100;
    }


}
